plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

Properties properties = new Properties()
InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
properties.load(inputStream)
android {
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "io.agora.examples.karaoke_view_ex"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 8
        versionName exampleVersion.toString()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "APP_ID", "\"${properties.getProperty("APP_ID", "")}\"")
        buildConfigField("String", "APP_CERTIFICATE", "\"${properties.getProperty("APP_CERTIFICATE", "")}\"")
        buildConfigField("String", "YSD_APP_ID", "\"${properties.getProperty("YSD_APP_ID", "")}\"")
        buildConfigField("String", "YSD_APP_KEY", "\"${properties.getProperty("YSD_APP_KEY", "")}\"")
        buildConfigField("String", "YSD_TOKEN_HOST", "\"${properties.getProperty("YSD_TOKEN_HOST", "")}\"")
        buildConfigField("boolean", "ENABLE_LYRIC_CUTTER", "${enableLyricCutter.toBoolean()}")
        ndk {
            abiFilters 'arm64-v8a'
        }

    }

    signingConfigs {
        release {
            keyAlias "key0"
            keyPassword "123456"
            storeFile file('./keystore/testkey.jks')
            storePassword "123456"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    namespace 'io.agora.examples.karaoke_view_ex'

    buildFeatures {
        viewBinding true
    }


    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                outputFileName = "${project.rootProject.name}-${versionName}-${variant.buildType.name}-${releaseTime()}.apk"
            }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        buildConfig true
    }

    //must high than 23 because for support 16kb page size
    ndkVersion ndkLibVersion.toString()
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    if (isSdkMode.toBoolean()) {
        implementation "io.github.winskyan:Agora-LyricsViewEx:${sdkVersion.toString()}"
    } else {
        implementation project(':karaoke_view_ex')
    }

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    implementation 'io.agora.rtc:agora-special-full:4.1.1.24'

    implementation 'com.github.guohai:Leonids:9f5a9190f6'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'io.agora:authentication:2.0.0'
    implementation 'commons-codec:commons-codec:1.16.0'
    implementation 'pub.devrel:easypermissions:3.0.0'

    implementation("io.github.winskyan:Agora-MccExService:2.2.0.133.6") {
        exclude(group: "io.agora.rtc", module: "agora-special-full")
    }
//    def roomVersion = "2.5.2"
//    implementation("androidx.room:room-runtime:${roomVersion.toString()}")
//    implementation("androidx.room:room-ktx:${roomVersion.toString()}")
}

static def releaseTime() {
    return new Date().format("yyyyMMdd_HHmmss")
}
